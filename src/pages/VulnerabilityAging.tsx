import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
import { Badge } from "@/components/ui/badge";
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { useState } from "react";
import { DownloadDropdown } from "@/components/DownloadDropdown";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

interface VulnerabilityAgingData {
  id: number;
  host: string;
  name: string;
  cve: string;
  cve_published_date: string | null;
  days_after_discovery: number | null;
  plugin_id: number;
  risk: string;
  instance_id: string;
}

const riskOrder = { "Critical": 1, "High": 2, "Medium": 3, "Low": 4 };
const ITEMS_PER_PAGE = 100;

export default function VulnerabilityAging() {
  const [currentPage, setCurrentPage] = useState(1);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const { data: ageingData, isLoading } = useQuery({
    queryKey: ['ageing-data'],
    queryFn: async () => {
      const instanceId = localStorage.getItem('currentInstanceId');
      const { data, error } = await supabase
        .from('ageing_of_vulnerability')
        .select('id, host, name, cve, cve_published_date, days_after_discovery, risk')
        .eq('instance_id', instanceId)
        .order('days_after_discovery', { ascending: false });
      
      if (error) {
        console.error('Error fetching vulnerability ageing data:', error);
        throw error;
      }
      
      return data;
    }
  });

  // Sort data by risk (Critical first, then High, Medium, Low)
  const sortedData = ageingData?.sort((a, b) => {
    const aOrder = riskOrder[a.risk as keyof typeof riskOrder] || 999;
    const bOrder = riskOrder[b.risk as keyof typeof riskOrder] || 999;
    return aOrder - bOrder;
  });

  // Calculate vulnerability age distribution
  const ageDistribution = sortedData ? (() => {
    const ranges = {
      "0-30 days": 0,
      "31-90 days": 0,
      "91-180 days": 0,
      "181-365 days": 0,
      "Over 1 year": 0,
    };

    let totalWithDays = 0;
    sortedData.forEach(vuln => {
      const days = vuln.days_after_discovery;
      if (days !== null) {
        totalWithDays++;
        if (days <= 30) {
          ranges["0-30 days"]++;
        } else if (days <= 90) {
          ranges["31-90 days"]++;
        } else if (days <= 180) {
          ranges["91-180 days"]++;
        } else if (days <= 365) {
          ranges["181-365 days"]++;
        } else {
          ranges["Over 1 year"]++;
        }
      }
    });

    return Object.entries(ranges).map(([name, value], index) => ({
      name,
      value,
      percentage: totalWithDays > 0 ? ((value / totalWithDays) * 100).toFixed(1) : "0.0",
      color: ["#16a34a", "#ca8a04", "#ea580c", "#dc2626", "#7c2d12"][index]
    }));
  })() : [];

  // Get oldest vulnerabilities (top 10)
  const oldestVulnerabilities = sortedData?.filter(v => v.days_after_discovery !== null)
    .sort((a, b) => (b.days_after_discovery || 0) - (a.days_after_discovery || 0))
    .slice(0, 10) || [];

  // Calculate statistics
  const stats = sortedData ? {
    totalVulnerabilities: sortedData.length,
    averageAge: sortedData.filter(v => v.days_after_discovery !== null).length > 0 ? 
      Math.round(sortedData.filter(v => v.days_after_discovery !== null)
        .reduce((sum, v) => sum + (v.days_after_discovery || 0), 0) / 
      sortedData.filter(v => v.days_after_discovery !== null).length) : 0,
    oldestVulnerability: sortedData.filter(v => v.days_after_discovery !== null).length > 0 ?
      Math.max(...sortedData.filter(v => v.days_after_discovery !== null).map(v => v.days_after_discovery || 0)) : 0,
    uniqueCveCount: new Set(sortedData.map(v => v.cve)).size,
  } : {
    totalVulnerabilities: 0,
    averageAge: 0,
    oldestVulnerability: 0,
    uniqueCveCount: 0,
  };

  // Pagination
  const totalPages = sortedData ? Math.ceil(sortedData.length / ITEMS_PER_PAGE) : 0;
  const paginatedData = sortedData?.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  // Get unique CVEs with their details
  const uniqueCves = sortedData ? (() => {
    const cveMap = new Map();
    sortedData.forEach(vuln => {
      if (!cveMap.has(vuln.cve)) {
        cveMap.set(vuln.cve, {
          cve: vuln.cve,
          name: vuln.name,
          hosts: new Set([vuln.host]),
          days: vuln.days_after_discovery
        });
      } else {
        const existing = cveMap.get(vuln.cve);
        existing.hosts.add(vuln.host);
        // Keep the highest days value
        if (vuln.days_after_discovery !== null && 
            (existing.days === null || vuln.days_after_discovery > existing.days)) {
          existing.days = vuln.days_after_discovery;
        }
      }
    });
    return Array.from(cveMap.values()).sort((a, b) => b.days - a.days);
  })() : [];

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold">Ageing of CVE</h1>
            <p className="text-muted-foreground">Analysis of vulnerability discovery dates and aging patterns</p>
          </div>
          <DownloadDropdown />
        </div>
        <div className="flex items-center justify-center py-8">
          <p className="text-muted-foreground">Loading vulnerability aging data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Ageing of CVE</h1>
          <p className="text-muted-foreground">Analysis of vulnerability discovery dates and aging patterns</p>
        </div>
        <DownloadDropdown />
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-card p-4 rounded-lg border">
          <p className="text-sm text-muted-foreground">Total Vulnerabilities</p>
          <p className="text-2xl font-bold">{stats.totalVulnerabilities}</p>
        </div>
        <div className="bg-card p-4 rounded-lg border">
          <p className="text-sm text-muted-foreground">Average Age (Days)</p>
          <p className="text-2xl font-bold">{stats.averageAge}</p>
        </div>
        <div className="bg-card p-4 rounded-lg border">
          <p className="text-sm text-muted-foreground">Oldest Vulnerability (Days)</p>
          <p className="text-2xl font-bold">{stats.oldestVulnerability}</p>
        </div>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <div 
            className="bg-card p-4 rounded-lg border cursor-pointer hover:bg-muted/20 transition-colors"
            onClick={() => setIsDialogOpen(true)}
          >
            <p className="text-sm text-muted-foreground">Unique CVE IDs</p>
            <p className="text-2xl font-bold text-blue-500">{stats.uniqueCveCount}</p>
          </div>
          <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Unique CVE Details</DialogTitle>
            </DialogHeader>
            <div className="overflow-x-auto">
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-2 px-3 bg-muted">CVE ID</th>
                    <th className="text-left py-2 px-3 bg-muted">Vulnerability Name</th>
                    <th className="text-left py-2 px-3 bg-muted">Hosts</th>
                    <th className="text-left py-2 px-3 bg-muted">Days Since Discovery</th>
                  </tr>
                </thead>
                <tbody>
                  {uniqueCves.map((cve, index) => (
                    <tr key={index} className="border-b hover:bg-muted/20">
                      <td className="py-2 px-3">
                        <code className="text-xs bg-background px-1 py-0.5 rounded">{cve.cve}</code>
                      </td>
                      <td className="py-2 px-3 max-w-md truncate">{cve.name}</td>
                      <td className="py-2 px-3">{cve.hosts.size}</td>
                      <td className="py-2 px-3 font-medium">
                        {cve.days !== null ? `${cve.days} days` : "Unknown"}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Vulnerability Age Distribution */}
        <div className="chart-container">
          <h3 className="text-lg font-semibold mb-4">Vulnerability Age Distribution</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={ageDistribution}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={120}
                  paddingAngle={5}
                  dataKey="value"
                >
                  {ageDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="flex flex-wrap justify-center gap-2 mt-4">
            {ageDistribution.map((item, index) => (
              <div key={index} className="flex items-center gap-2 text-xs">
                <div className="w-3 h-3 rounded-full" style={{ backgroundColor: item.color }} />
                <span>{item.name}: {item.value} ({item.percentage}%)</span>
              </div>
            ))}
          </div>
        </div>

        {/* Oldest Vulnerabilities Chart */}
        <div className="chart-container">
          <h3 className="text-lg font-semibold mb-4">Top 10 Oldest Vulnerabilities</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={oldestVulnerabilities}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis 
                  dataKey="cve" 
                  stroke="#9ca3af" 
                  fontSize={10}
                  angle={-45}
                  textAnchor="end"
                  height={80}
                />
                <YAxis stroke="#9ca3af" />
                <Tooltip 
                  contentStyle={{
                    backgroundColor: "#ffffff",
                    border: "1px solid #e5e7eb",
                    borderRadius: "8px",
                    color: "#000000"
                  }}
                  formatter={(value, name, props) => {
                    return [
                      <span style={{ color: "#000000" }}>{`${props.payload.cve}: ${value} days`}</span>,
                      null
                    ];
                  }}
                  labelFormatter={() => ""}
                />
                <Bar dataKey="days_after_discovery" fill="#dc2626" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Detailed Aging Table */}
      <div className="chart-container">
        <h3 className="text-lg font-semibold mb-4">Vulnerability Ageing Details</h3>
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b border-border">
                <th className="text-left py-3 px-2">Vulnerability Name</th>
                <th className="text-center py-3 px-2">CVE</th>
                <th className="text-center py-3 px-2">Host</th>
                <th className="text-center py-3 px-2">Risk</th>
                <th className="text-center py-3 px-2">Published Date</th>
                <th className="text-center py-3 px-2">Days Since Discovery</th>
              </tr>
            </thead>
            <tbody>
              {paginatedData?.map((item, index) => (
                <tr key={index} className="border-b border-border/50 hover:bg-muted/20">
                  <td className="py-3 px-2">{item.name}</td>
                  <td className="py-3 px-2 text-center">
                    <code className="text-xs bg-background px-1 py-0.5 rounded">{item.cve}</code>
                  </td>
                  <td className="py-3 px-2 text-center font-mono text-xs">{item.host}</td>
                  <td className="py-3 px-2 text-center">
                    <Badge variant={
                      item.risk === "Critical" ? "destructive" : 
                      item.risk === "High" ? "default" : "secondary"
                    }>
                      {item.risk}
                    </Badge>
                  </td>
                  <td className="py-3 px-2 text-center">
                    {item.cve_published_date ? new Date(item.cve_published_date).toLocaleDateString() : "—"}
                  </td>
                  <td className="py-3 px-2 text-center font-bold">
                    {item.days_after_discovery !== null ? `${item.days_after_discovery} days` : "Unknown"}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        {/* Pagination Controls */}
        <div className="flex items-center justify-between mt-4">
          <p className="text-sm text-muted-foreground">
            Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to {Math.min(currentPage * ITEMS_PER_PAGE, sortedData?.length || 0)} of {sortedData?.length || 0} entries
          </p>
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
