
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
import { Badge } from "@/components/ui/badge";
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";

interface VulnerabilityAgingData {
  id: number;
  name: string;
  cve: string;
  cve_published_date: string | null;
  plugin_id: number;
  host: string;
  risk: string;
  days_after_discovery: number | null;
}

export default function VulnerabilityAging() {
  const { data: agingData, isLoading } = useQuery({
    queryKey: ['ageing-of-vulnerability'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('ageing_of_vulnerability')
        .select('*')
        .order('days_after_discovery', { ascending: false });
      
      if (error) {
        console.error('Error fetching vulnerability aging data:', error);
        throw error;
      }
      
      return data as VulnerabilityAgingData[];
    }
  });

  // Calculate vulnerability age distribution
  const ageDistribution = agingData ? (() => {
    const ranges = {
      "0-30 days": 0,
      "31-90 days": 0,
      "91-180 days": 0,
      "181-365 days": 0,
      "1+ years": 0,
      "Unknown": 0
    };

    agingData.forEach(vuln => {
      const days = vuln.days_after_discovery;
      if (days === null) {
        ranges["Unknown"]++;
      } else if (days <= 30) {
        ranges["0-30 days"]++;
      } else if (days <= 90) {
        ranges["31-90 days"]++;
      } else if (days <= 180) {
        ranges["91-180 days"]++;
      } else if (days <= 365) {
        ranges["181-365 days"]++;
      } else {
        ranges["1+ years"]++;
      }
    });

    return Object.entries(ranges).map(([name, value], index) => ({
      name,
      value,
      color: ["#16a34a", "#ca8a04", "#ea580c", "#dc2626", "#7c2d12", "#6b7280"][index]
    }));
  })() : [];

  // Get oldest vulnerabilities (top 10)
  const oldestVulnerabilities = agingData?.filter(v => v.days_after_discovery !== null)
    .slice(0, 10) || [];

  // Calculate statistics
  const stats = agingData ? {
    totalVulnerabilities: agingData.length,
    averageAge: agingData.filter(v => v.days_after_discovery !== null).length > 0 ? 
      Math.round(agingData.filter(v => v.days_after_discovery !== null)
        .reduce((sum, v) => sum + (v.days_after_discovery || 0), 0) / 
      agingData.filter(v => v.days_after_discovery !== null).length) : 0,
    oldestVulnerability: agingData.filter(v => v.days_after_discovery !== null).length > 0 ?
      Math.max(...agingData.filter(v => v.days_after_discovery !== null).map(v => v.days_after_discovery || 0)) : 0,
    criticalOlderThan90Days: agingData.filter(v => v.risk === "Critical" && (v.days_after_discovery || 0) > 90).length,
  } : {
    totalVulnerabilities: 0,
    averageAge: 0,
    oldestVulnerability: 0,
    criticalOlderThan90Days: 0,
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold">Ageing of Vulnerability</h1>
          <p className="text-muted-foreground">Analysis of vulnerability discovery dates and aging patterns</p>
        </div>
        <div className="flex items-center justify-center py-8">
          <p className="text-muted-foreground">Loading vulnerability aging data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">Ageing of Vulnerability</h1>
        <p className="text-muted-foreground">Analysis of vulnerability discovery dates and aging patterns</p>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-card p-4 rounded-lg border">
          <p className="text-sm text-muted-foreground">Total Vulnerabilities</p>
          <p className="text-2xl font-bold">{stats.totalVulnerabilities}</p>
        </div>
        <div className="bg-card p-4 rounded-lg border">
          <p className="text-sm text-muted-foreground">Average Age (Days)</p>
          <p className="text-2xl font-bold">{stats.averageAge}</p>
        </div>
        <div className="bg-card p-4 rounded-lg border">
          <p className="text-sm text-muted-foreground">Oldest Vulnerability (Days)</p>
          <p className="text-2xl font-bold">{stats.oldestVulnerability}</p>
        </div>
        <div className="bg-card p-4 rounded-lg border">
          <p className="text-sm text-muted-foreground">Critical {'>'} 90 Days</p>
          <p className="text-2xl font-bold text-red-500">{stats.criticalOlderThan90Days}</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Vulnerability Age Distribution */}
        <div className="chart-container">
          <h3 className="text-lg font-semibold mb-4">Vulnerability Age Distribution</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={ageDistribution}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={120}
                  paddingAngle={5}
                  dataKey="value"
                >
                  {ageDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="flex flex-wrap justify-center gap-2 mt-4">
            {ageDistribution.map((item, index) => (
              <div key={index} className="flex items-center gap-2 text-xs">
                <div className="w-3 h-3 rounded-full" style={{ backgroundColor: item.color }} />
                <span>{item.name}: {item.value}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Oldest Vulnerabilities Chart */}
        <div className="chart-container">
          <h3 className="text-lg font-semibold mb-4">Top 10 Oldest Vulnerabilities</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={oldestVulnerabilities}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis 
                  dataKey="cve" 
                  stroke="#9ca3af" 
                  fontSize={10}
                  angle={-45}
                  textAnchor="end"
                  height={80}
                />
                <YAxis stroke="#9ca3af" />
                <Tooltip />
                <Bar dataKey="days_after_discovery" fill="#dc2626" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Detailed Aging Table */}
      <div className="chart-container">
        <h3 className="text-lg font-semibold mb-4">Vulnerability Aging Details</h3>
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b border-border">
                <th className="text-left py-3 px-2">Vulnerability Name</th>
                <th className="text-center py-3 px-2">CVE</th>
                <th className="text-center py-3 px-2">Host</th>
                <th className="text-center py-3 px-2">Risk</th>
                <th className="text-center py-3 px-2">Published Date</th>
                <th className="text-center py-3 px-2">Days Since Discovery</th>
              </tr>
            </thead>
            <tbody>
              {agingData?.map((item, index) => (
                <tr key={index} className="border-b border-border/50 hover:bg-muted/20">
                  <td className="py-3 px-2">{item.name}</td>
                  <td className="py-3 px-2 text-center">
                    <code className="text-xs bg-background px-1 py-0.5 rounded">{item.cve}</code>
                  </td>
                  <td className="py-3 px-2 text-center font-mono text-xs">{item.host}</td>
                  <td className="py-3 px-2 text-center">
                    <Badge variant={
                      item.risk === "Critical" ? "destructive" : 
                      item.risk === "High" ? "default" : "secondary"
                    }>
                      {item.risk}
                    </Badge>
                  </td>
                  <td className="py-3 px-2 text-center">{item.cve_published_date || "â€”"}</td>
                  <td className="py-3 px-2 text-center font-bold">
                    {item.days_after_discovery !== null ? `${item.days_after_discovery} days` : "Unknown"}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
