import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { UUID } from "crypto";
import { DownloadDropdown } from "@/components/DownloadDropdown";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight, Download, Loader2, Info } from "lucide-react";
import { useState } from "react";
import { useToast } from "@/components/ui/use-toast";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

interface MostExploitableData {
  id: number;
  host: string;
  cumulative_exploitability: number;
  critical_count: number;
  high_count: number;
  medium_count: number;
  low_count: number;
  total_vulnerabilities: number;
  instance_id: UUID;
  run_id: string;
}

const ITEMS_PER_PAGE = 75;

export default function MostExploitable() {
  const [currentPage, setCurrentPage] = useState(1);
  const [isDownloading, setIsDownloading] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const { toast } = useToast();

  const { data: exploitabilityData, isLoading } = useQuery({
    queryKey: ['most-exploitable'],
    queryFn: async () => {
      const instanceId = localStorage.getItem('currentInstanceId');
      const runId = localStorage.getItem('currentRunId');
      const { data, error } = await supabase
        .from('most_exploitable')
        .select('id, host, cumulative_exploitability, critical_count, high_count, medium_count, low_count, total_vulnerabilities')
        .eq('instance_id', instanceId)
        .eq('run_id', runId)
        .order('cumulative_exploitability', { ascending: false });
      
      if (error) {
        console.error('Error fetching most exploitable data:', error);
        throw error;
      }
      
      return data as MostExploitableData[];
    }
  });

  // Get top 10 most exploitable hosts for the chart
  const topExploitableHosts = exploitabilityData?.slice(0, 10).map(host => ({
    host: host.host,
    score: host.cumulative_exploitability,
    critical: host.critical_count,
    high: host.high_count,
    medium: host.medium_count,
    low: host.low_count
  })) || [];

  // Pagination
  const totalPages = exploitabilityData ? Math.ceil(exploitabilityData.length / ITEMS_PER_PAGE) : 0;
  const paginatedData = exploitabilityData?.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  const columns = [
    { key: "host", title: "Host" },
    { 
      key: "cumulative_exploitability", 
      title: "Cumulative Exploitability",
      render: (value: number) => (
        <span className="font-bold text-red-500">{value.toFixed(1)}</span>
      )
    },
    { 
      key: "critical_count", 
      title: "Critical Count",
      render: (value: number) => (
        <span className="font-semibold text-red-500">{value}</span>
      )
    },
    { 
      key: "high_count", 
      title: "High Count",
      render: (value: number) => (
        <span className="font-semibold text-orange-500">{value}</span>
      )
    },
    { 
      key: "medium_count", 
      title: "Medium Count",
      render: (value: number) => (
        <span className="font-semibold text-yellow-500">{value}</span>
      )
    },
    { 
      key: "low_count", 
      title: "Low Count",
      render: (value: number) => (
        <span className="font-semibold text-green-500">{value}</span>
      )
    },
    { key: "total_vulnerabilities", title: "Total Vulnerabilities" }
  ];

  const handleDownloadSheet = async () => {
    try {
      setIsDownloading(true);
      const instanceId = localStorage.getItem('currentInstanceId');
      const runId = localStorage.getItem('currentRunId');
      
      if (!instanceId || !runId) {
        console.error('Instance ID or Run ID not found');
        toast({
          variant: "destructive",
          title: "Error",
          description: "Instance ID or Run ID not found",
          duration: 4000,
        });
        return;
      }

      // Encode the sheet name in Base64 URL-safe format
      const sheetName = "1.3 Most Exploitable";
      const encodedSheetName = btoa(decodeURIComponent(encodeURIComponent(sheetName)))
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=+$/, '');

      // Make the API request
      const response = await fetch(
        `http://192.168.89.143/api/v1/download-sheet/${instanceId}/${runId}/${encodedSheetName}`,
        {
          method: 'GET',
        }
      );

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        throw new Error(errorData?.detail || `HTTP error! status: ${response.status}`);
      }

      // Get the blob from the response
      const blob = await response.blob();
      
      // Create a download link and trigger the download
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${sheetName.replace(' ', '_')}.xls`;
      document.body.appendChild(a);
      a.click();
      
      // Clean up
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Error downloading sheet:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error instanceof Error ? error.message : 'Failed to download sheet',
        duration: 4000,
      });
    } finally {
      setIsDownloading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold">Most Exploitable</h1>
            <p className="text-muted-foreground">Hosts with highest risk of exploitation based on cumulative exploitability scores</p>
          </div>
        </div>
        <div className="flex items-center justify-center py-8">
          <p className="text-muted-foreground">Loading exploitability data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Most Exploitable</h1>
          <p className="text-muted-foreground">Hosts with highest risk of exploitation based on cumulative exploitability scores</p>
        </div>
        <Button 
          onClick={handleDownloadSheet} 
          className="flex items-center gap-2"
          disabled={isDownloading}
        >
          {isDownloading ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin" />
              Downloading...
            </>
          ) : (
            <>
              <Download className="h-4 w-4" />
              Download Sheet
            </>
          )}
        </Button>
      </div>

      {/* Exploitability Score Calculation Description */}
      <div className="chart-container bg-card rounded-lg p-6 shadow-sm">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-xl font-bold text-primary">Exploitability Score Calculation</h3>
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="outline" size="sm" className="flex items-center gap-2">
                <Info className="h-4 w-4" />
                How is the Cumulative Exploitability Score calculated?
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Cumulative Exploitability Score Calculation</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <p className="text-base leading-relaxed text-muted-foreground">
                  The Cumulative Exploitability score is calculated by combining EPSS (Exploit Prediction Scoring System), VPR (Vulnerability Priority Rating), and KEV (Known Exploited Vulnerabilities) metrics for all vulnerabilities on each host. Higher scores indicate targets that should be prioritized for remediation.
                </p>
                
                <div className="bg-muted/50 p-6 rounded-lg border border-border/50">
                  <h4 className="text-lg font-semibold mb-3 text-primary">Formula:</h4>
                  <div className="flex flex-col items-center space-y-3">
                    <div className="text-xl font-mono bg-background/50 px-6 py-3 rounded-md shadow-sm">
                      Cumulative Exploitability = Σ(EPSS × VPR × KEV)
                    </div>
                    <div className="text-sm font-medium text-muted-foreground">
                      where:
                    </div>
                    <ul className="text-sm space-y-2 list-disc list-inside text-muted-foreground">
                      <li className="hover:text-foreground transition-colors">EPSS: Probability score (0-1) of exploit availability</li>
                      <li className="hover:text-foreground transition-colors">VPR: Priority rating (0-10) based on vulnerability characteristics</li>
                      <li className="hover:text-foreground transition-colors">KEV: Binary multiplier (1 or 2) if vulnerability is in CISA's KEV catalog</li>
                    </ul>
                  </div>
                </div>

                <div className="bg-muted/50 p-6 rounded-lg border border-border/50">
                  <h4 className="text-lg font-semibold mb-3 text-primary">Example:</h4>
                  <div className="text-sm space-y-3">
                    <p className="font-medium">For a host with 3 vulnerabilities:</p>
                    <ul className="list-disc list-inside space-y-2 text-muted-foreground">
                      <li className="hover:text-foreground transition-colors">Vuln 1: EPSS(0.8) × VPR(8) × KEV(2) = <span className="font-semibold text-primary">12.8</span></li>
                      <li className="hover:text-foreground transition-colors">Vuln 2: EPSS(0.5) × VPR(6) × KEV(1) = <span className="font-semibold text-primary">3.0</span></li>
                      <li className="hover:text-foreground transition-colors">Vuln 3: EPSS(0.3) × VPR(4) × KEV(1) = <span className="font-semibold text-primary">1.2</span></li>
                    </ul>
                    <p className="font-semibold text-lg mt-4 pt-3 border-t border-border/50">
                      Total Cumulative Exploitability = <span className="text-primary">17.0</span>
                    </p>
                  </div>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
        <p className="text-base leading-relaxed text-muted-foreground">
          The Cumulative Exploitability score helps identify hosts with the highest risk of exploitation based on multiple scoring metrics. Higher scores indicate targets that should be prioritized for remediation.
        </p>
      </div>

      {/* Top 10 Most Exploitable Hosts Chart */}
      <div className="chart-container">
        <h3 className="text-lg font-semibold mb-4">Top 10 Most Exploitable Hosts</h3>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={topExploitableHosts}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis 
                dataKey="host" 
                stroke="#9ca3af" 
                fontSize={10}
                angle={-45}
                textAnchor="end"
                height={80}
              />
              <YAxis stroke="#9ca3af" />
              <Tooltip 
                contentStyle={{
                  backgroundColor: "#ffffff",
                  border: "1px solid #e5e7eb",
                  borderRadius: "8px",
                  color: "#000000"
                }}
                formatter={(value, name) => {
                  const label = typeof name === 'string' ? name.charAt(0).toUpperCase() + name.slice(1) : name;
                  return [
                    <span style={{ color: "#000000" }}>{`${label}: ${value}`}</span>,
                    null
                  ];
                }}
                labelFormatter={(label) => `Host: ${label}`}
              />
              <Bar dataKey="score" fill="#dc2626" name="Cumulative Score" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Most Exploitable Hosts Table */}
      <div className="chart-container">
        <h3 className="text-lg font-semibold mb-4">Most Exploitable Hosts</h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-border">
                {columns.map((col) => (
                  <th key={col.key} className="text-left py-3 px-4">{col.title}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {paginatedData?.map((row, index) => (
                <tr key={index} className="border-b border-border/50 hover:bg-muted/20">
                  {columns.map((col) => (
                    <td key={col.key} className="py-3 px-4">
                      {col.render ? col.render(row[col.key as keyof MostExploitableData] as number) : row[col.key as keyof MostExploitableData]}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination Controls */}
        <div className="flex items-center justify-between mt-4">
          <p className="text-sm text-muted-foreground">
            Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to {Math.min(currentPage * ITEMS_PER_PAGE, exploitabilityData?.length || 0)} of {exploitabilityData?.length || 0} entries
          </p>
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
