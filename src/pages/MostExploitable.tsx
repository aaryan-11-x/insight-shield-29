import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { UUID } from "crypto";
import { DownloadDropdown } from "@/components/DownloadDropdown";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { useState } from "react";

interface MostExploitableData {
  id: number;
  host: string;
  cumulative_exploitability: number;
  critical_count: number;
  high_count: number;
  medium_count: number;
  low_count: number;
  total_vulnerabilities: number;
  instance_id: UUID;
  run_id: string;
}

const ITEMS_PER_PAGE = 100;

export default function MostExploitable() {
  const [currentPage, setCurrentPage] = useState(1);

  const { data: exploitabilityData, isLoading } = useQuery({
    queryKey: ['most-exploitable'],
    queryFn: async () => {
      const instanceId = localStorage.getItem('currentInstanceId');
      const runId = localStorage.getItem('currentRunId');
      const { data, error } = await supabase
        .from('most_exploitable')
        .select('id, host, cumulative_exploitability, critical_count, high_count, medium_count, low_count, total_vulnerabilities')
        .eq('instance_id', instanceId)
        .eq('run_id', runId)
        .order('cumulative_exploitability', { ascending: false });
      
      if (error) {
        console.error('Error fetching most exploitable data:', error);
        throw error;
      }
      
      return data as MostExploitableData[];
    }
  });

  // Get top 10 most exploitable hosts for the chart
  const topExploitableHosts = exploitabilityData?.slice(0, 10).map(host => ({
    host: host.host,
    score: host.cumulative_exploitability,
    critical: host.critical_count,
    high: host.high_count,
    medium: host.medium_count,
    low: host.low_count
  })) || [];

  // Pagination
  const totalPages = exploitabilityData ? Math.ceil(exploitabilityData.length / ITEMS_PER_PAGE) : 0;
  const paginatedData = exploitabilityData?.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  const columns = [
    { key: "host", title: "Host" },
    { 
      key: "cumulative_exploitability", 
      title: "Cumulative Exploitability",
      render: (value: number) => (
        <span className="font-bold text-red-500">{value.toFixed(1)}</span>
      )
    },
    { 
      key: "critical_count", 
      title: "Critical Count",
      render: (value: number) => (
        <span className="font-semibold text-red-500">{value}</span>
      )
    },
    { 
      key: "high_count", 
      title: "High Count",
      render: (value: number) => (
        <span className="font-semibold text-orange-500">{value}</span>
      )
    },
    { 
      key: "medium_count", 
      title: "Medium Count",
      render: (value: number) => (
        <span className="font-semibold text-yellow-500">{value}</span>
      )
    },
    { 
      key: "low_count", 
      title: "Low Count",
      render: (value: number) => (
        <span className="font-semibold text-green-500">{value}</span>
      )
    },
    { key: "total_vulnerabilities", title: "Total Vulnerabilities" }
  ];

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold">Most Exploitable</h1>
            <p className="text-muted-foreground">Hosts with highest risk of exploitation based on cumulative exploitability scores</p>
          </div>
          <DownloadDropdown />
        </div>
        <div className="flex items-center justify-center py-8">
          <p className="text-muted-foreground">Loading exploitability data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Most Exploitable</h1>
          <p className="text-muted-foreground">Hosts with highest risk of exploitation based on cumulative exploitability scores</p>
        </div>
        <DownloadDropdown />
      </div>

      {/* Exploitability Score Calculation Description */}
      <div className="chart-container">
        <h3 className="text-lg font-semibold mb-4">Exploitability Score Calculation</h3>
        <p className="text-muted-foreground mb-4">
          This sheet identifies hosts with the highest risk of exploitation. The Cumulative Exploitability score combines EPSS, VPR, and KEV metrics for all vulnerabilities on each host. Higher scores indicate targets that should be prioritized for remediation.
        </p>
      </div>

      {/* Top 10 Most Exploitable Hosts Chart */}
      <div className="chart-container">
        <h3 className="text-lg font-semibold mb-4">Top 10 Most Exploitable Hosts</h3>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={topExploitableHosts}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis 
                dataKey="host" 
                stroke="#9ca3af" 
                fontSize={10}
                angle={-45}
                textAnchor="end"
                height={80}
              />
              <YAxis stroke="#9ca3af" />
              <Tooltip 
                contentStyle={{
                  backgroundColor: "#ffffff",
                  border: "1px solid #e5e7eb",
                  borderRadius: "8px",
                  color: "#000000"
                }}
                formatter={(value, name) => {
                  const label = typeof name === 'string' ? name.charAt(0).toUpperCase() + name.slice(1) : name;
                  return [
                    <span style={{ color: "#000000" }}>{`${label}: ${value}`}</span>,
                    null
                  ];
                }}
                labelFormatter={(label) => `Host: ${label}`}
              />
              <Bar dataKey="score" fill="#dc2626" name="Cumulative Score" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Most Exploitable Hosts Table */}
      <div className="chart-container">
        <h3 className="text-lg font-semibold mb-4">Most Exploitable Hosts</h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-border">
                {columns.map((col) => (
                  <th key={col.key} className="text-left py-3 px-4">{col.title}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {paginatedData?.map((row, index) => (
                <tr key={index} className="border-b border-border/50 hover:bg-muted/20">
                  {columns.map((col) => (
                    <td key={col.key} className="py-3 px-4">
                      {col.render ? col.render(row[col.key as keyof MostExploitableData] as number) : row[col.key as keyof MostExploitableData]}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination Controls */}
        <div className="flex items-center justify-between mt-4">
          <p className="text-sm text-muted-foreground">
            Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to {Math.min(currentPage * ITEMS_PER_PAGE, exploitabilityData?.length || 0)} of {exploitabilityData?.length || 0} entries
          </p>
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
