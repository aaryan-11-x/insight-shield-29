import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
import { Badge } from "@/components/ui/badge";
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";

interface ExploitabilityScoringData {
  id: number;
  host: string;
  cve: string;
  name: string | null;
  description: string | null;
  plugin_id: number;
  plugin_output: string | null;
  risk: string | null;
  cvss_category: string | null;
  cvss_v3_base_score: number | null;
  epss_category: string | null;
  epss_score: number | null;
  vpr_category: string | null;
  vpr_score: number | null;
  exploitability_score: number | null;
  kev_listed: boolean | null;
  instance_id: string;
}

export default function Exploitability() {
  const { data: exploitabilityData, isLoading } = useQuery({
    queryKey: ['exploitability-data'],
    queryFn: async () => {
      const instanceId = localStorage.getItem('currentInstanceId');
      const { data, error } = await supabase
        .from('exploitability_scoring')
        .select('*')
        .eq('instance_id', instanceId)
        .order('exploitability_score', { ascending: false });
      
      if (error) {
        console.error('Error fetching exploitability data:', error);
        throw error;
      }
      
      return data;
    }
  });

  // Calculate exploitability score summary
  const scoreDistribution = exploitabilityData ? (() => {
    const totalVulns = exploitabilityData.length;
    const highCount = exploitabilityData.filter(item => 
      item.exploitability_score !== null && item.exploitability_score >= 7
    ).length;
    const mediumCount = exploitabilityData.filter(item => 
      item.exploitability_score !== null && item.exploitability_score >= 4 && item.exploitability_score < 7
    ).length;
    const lowCount = exploitabilityData.filter(item => 
      item.exploitability_score !== null && item.exploitability_score < 4
    ).length;
    const kevCount = exploitabilityData.filter(item => item.kev_listed === true).length;

    return [
      { name: "Total Vulnerabilities", value: totalVulns, color: "#6b7280" },
      { name: "High (≥7)", value: highCount, color: "#dc2626" },
      { name: "Medium (4-6.9)", value: mediumCount, color: "#ea580c" },
      { name: "Low (<4)", value: lowCount, color: "#16a34a" },
      { name: "KEV Listed", value: kevCount, color: "#7c2d12" }
    ];
  })() : [];

  // Exploitability distribution for pie chart
  const exploitabilityDistribution = exploitabilityData ? (() => {
    const highCount = exploitabilityData.filter(item => 
      item.exploitability_score !== null && item.exploitability_score >= 7
    ).length;
    const mediumCount = exploitabilityData.filter(item => 
      item.exploitability_score !== null && item.exploitability_score >= 4 && item.exploitability_score < 7
    ).length;
    const lowCount = exploitabilityData.filter(item => 
      item.exploitability_score !== null && item.exploitability_score < 4
    ).length;

    return [
      { name: "High (≥7)", value: highCount, color: "#dc2626" },
      { name: "Medium (4-6.9)", value: mediumCount, color: "#ea580c" },
      { name: "Low (<4)", value: lowCount, color: "#16a34a" }
    ];
  })() : [];

  // Top vulnerabilities by exploitability
  const topVulnerabilities = exploitabilityData?.filter(v => v.exploitability_score !== null)
    .slice(0, 10) || [];

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold">Exploitability Scoring</h1>
          <p className="text-muted-foreground">Analysis of vulnerability exploitability based on multiple scoring metrics</p>
        </div>
        <div className="flex items-center justify-center py-8">
          <p className="text-muted-foreground">Loading exploitability data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">Exploitability Scoring</h1>
        <p className="text-muted-foreground">Analysis of vulnerability exploitability based on multiple scoring metrics</p>
      </div>

      {/* Exploitability Score Summary */}
      <div className="chart-container">
        <h3 className="text-lg font-semibold mb-4">Exploitability Score Summary</h3>
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
          {scoreDistribution.map((item, index) => (
            <div key={index} className="bg-card p-4 rounded-lg border text-center">
              <p className="text-sm text-muted-foreground">{item.name}</p>
              <p className="text-2xl font-bold" style={{ color: item.color }}>{item.value}</p>
            </div>
          ))}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Exploitability Distribution Pie Chart */}
        <div className="chart-container">
          <h3 className="text-lg font-semibold mb-4">Exploitability Distribution</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={exploitabilityDistribution}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={120}
                  paddingAngle={5}
                  dataKey="value"
                >
                  {exploitabilityDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: "#ffffff", 
                    border: "1px solid #e5e7eb",
                    borderRadius: "8px",
                    color: "#000000"
                  }}
                  formatter={(value, name) => {
                    return [
                      <span style={{ color: "#000000" }}>{`${name}: ${value}`}</span>,
                      null
                    ];
                  }}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="flex flex-wrap justify-center gap-2 mt-4">
            {exploitabilityDistribution.map((item, index) => (
              <div key={index} className="flex items-center gap-2 text-xs">
                <div className="w-3 h-3 rounded-full" style={{ backgroundColor: item.color }} />
                <span>{item.name}: {item.value}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Top Vulnerabilities by Exploitability */}
        <div className="chart-container">
          <h3 className="text-lg font-semibold mb-4">Top 10 Most Exploitable Vulnerabilities</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={topVulnerabilities}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis 
                  dataKey="cve" 
                  stroke="#9ca3af" 
                  fontSize={10}
                  angle={-45}
                  textAnchor="end"
                  height={80}
                />
                <YAxis stroke="#9ca3af" />
                <Tooltip 
                  contentStyle={{
                    backgroundColor: "#ffffff",
                    border: "1px solid #e5e7eb",
                    borderRadius: "8px",
                    color: "#000000"
                  }}
                  formatter={(value, name, props) => {
                    return [
                      <span style={{ color: "#000000" }}>{`Exploitability Score: ${value}`}</span>,
                      null
                    ];
                  }}
                  labelFormatter={() => ""}
                />
                <Bar dataKey="exploitability_score" fill="#dc2626" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Detailed Exploitability Table */}
      <div className="chart-container">
        <h3 className="text-lg font-semibold mb-4">Exploitability Scoring Details</h3>
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b border-border">
                <th className="text-left py-3 px-2">CVE</th>
                <th className="text-left py-3 px-2">Vulnerability Name</th>
                <th className="text-center py-3 px-2">Host</th>
                <th className="text-center py-3 px-2">CVSS Score</th>
                <th className="text-center py-3 px-2">EPSS Score</th>
                <th className="text-center py-3 px-2">VPR Score</th>
                <th className="text-center py-3 px-2">KEV Listed</th>
                <th className="text-center py-3 px-2">Exploitability Score</th>
              </tr>
            </thead>
            <tbody>
              {exploitabilityData?.map((item, index) => (
                <tr key={index} className="border-b border-border/50 hover:bg-muted/20">
                  <td className="py-3 px-2">
                    <code className="text-xs bg-background px-1 py-0.5 rounded">{item.cve}</code>
                  </td>
                  <td className="py-3 px-2 max-w-xs truncate">{item.name || "—"}</td>
                  <td className="py-3 px-2 text-center font-mono text-xs">{item.host}</td>
                  <td className="py-3 px-2 text-center">{item.cvss_v3_base_score?.toFixed(1) || "—"}</td>
                  <td className="py-3 px-2 text-center">{item.epss_score?.toFixed(3) || "—"}</td>
                  <td className="py-3 px-2 text-center">{item.vpr_score?.toFixed(1) || "—"}</td>
                  <td className="py-3 px-2 text-center">
                    <Badge variant={item.kev_listed ? "destructive" : "secondary"}>
                      {item.kev_listed ? "Yes" : "No"}
                    </Badge>
                  </td>
                  <td className="py-3 px-2 text-center font-bold">
                    {item.exploitability_score?.toFixed(1) || "—"}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
